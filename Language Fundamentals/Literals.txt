======================================================================
Literals
====================================================================

A constant value which can be assigned to the variable is known as literal.
Example:
int x = 10;
x = Name of variable/identifier
int = data type / keyword
10 = constant value / literal

------------------------------------------------------
Integral Literals
--------------------------------------------------
For integral data types(byte,short,int,long) we can specify literal values in following ways:

1) decimal form (base 10): allowed digits are 0 to 9.
    Example : int x = 10;

2) octal form (base 8): allowed digits are 0 to 7.Literal values should be prefixed with 0.
    Example : int x = 010;

3) hexadecimal form (base 16) : allowed digits are 0 to 9 and a to f.
    for extra digits(a to f) we can use both lower case and upper case letters.
    The literal value should be prefixed with 0X or 0x.
    Example : int x = 0X10;

This are only possible ways to specify literal for integral data types.

Examples:

int x = 10;  //valid
int x = 0786;  //invalid ce: integer Value too large, we can only use number in range 0 to 7 in octadeciamal
int x = 0777;   //valid
int x = 0XFace;     //valid
int x = 0XBeef;      //valid
int x = 0XBeer;     //invalid becuse 'r' is outof range allowed range is a to f only

By default every integral literal is of int type if we want to convert them from int to long then
we have to add suffix L or l.
Example: long l1 = 23l;
         long l2 = 3L;
         int x = 10l  //invalid
         long l = 0X20L;


There is no direct way to specify byte and short literals explicitly but indirectly we can specify
whenever we are assigning integral literals to the byte variable and if the value lies within range of byte then
compiler treats it automatically as byte literals. llly short literal also.
Example: 
byte b = 10;
byte b = 127;
byte b = 128 ;  //invalid P L P found int required byte

short s = 32767;
short s = 32768;  //invalid P L P found int required short

---------------------------------------------------------
Floating Point Literals
---------------------------------------------------------

By default every floating point literal is of double type and hence we can't assign direcly to the float variable.
But we can specify floating point literal as float type by suffixed with f or F.
float f = 123.456;   // ce: Possible Loss of Precision found double required float
float f = 123.456F;  //valid
double d = 123.456;

We can specify explicitly floating point literal as double type by suffixed with d or D.
Offcourse this convention is not required.

double d = 123.456D;  //valid
float f = 123.456d;  //P S P found double required float.

We can specify floating point literals only in decimal form and we can't specify in octal and hexadecimal forms.

double d = 123.456;
double d = 0123.456;    //It is decimal literal and it don't be treated as octal literal
double d = 0X123.456;   //ce: malformed floating point literals

double d = 0786;   //ce: integer number is too large
double d = 0XFace;   //valid

double d = 0786.0  //valid
double d = 0XFace.0    //invalid

double d = 10;
Sopen(d)    //10.0

We can assign integral literals direcly to floting point variables and that integral laterals can be specified either in decimal,
octal,or hexadecimal form.

We can't assign floating point number to integral type.
example: 
double d = 10;
int x = 10.0 ;  //invalid  ce: P L P found double required int

We can specify floating point number even in exponential form(e).

Example:
double d = 1.2e;  //valid
float f = 1.2e3;  //invalid  P L P found double requries flaot
float f = 1.2e3f;  //valid

----------------------------------------------------------
Boolean Literals
----------------------------------------------------------
The only allowed value for boolean data type are true or false.

Example:
boolean b = 0;   // incompitable type found int required boolean
boolean b = True;   //cannot find symbol variable True 
boolean b = "true";  //incompitable type found String required boolean


--------------------------------------------------------------
char literals
--------------------------------------------------------------

1)We can specify char literals as single character within single quotes.

    Example:
    char ch = 'a';   //valid
    char ch = a;     //ce : cannot find symbol variable a class test
    char ch = "a";    //ce: incompitable types found: java.lang.String required: char
    char ch = 'ab';     //ce1: unclosed char literal   //ce2: unclosed char literal    // ce3: not a statment

2)We can specify char literal as integral literals which represent unicode value of the character under that integral literal can be 
specified in decimal,octal or hexadecimal form. But allowed range is 0 to 65535.

    char ch = 97;
    Spen(ch);    //a;

    char ch = 0XFace;  //valid
    char ch = 0777;   //valid
    char ch = 65535;    //valid
    char ch = 65536;    //POSSIBLE LOSS OF PRECISION FOUND INT required char

    If you try to print :
    char ch = 197;   //output will be '+'
    char ch = 1970;        //output will be '?'
    char ch = 19700;    //ouput will be '?'

    Now in case of 1970 and 19700 the output is same i.e '?' becuase our system doesn't have related font we can say.You can check www.unicode.org website all unicodes are availble there.

3)We can represent char literals in unicode representation which is nothing but '\uXXXX'. This XXXX is hexadecimal number.
    Example:
    char ch = '\u0061';    //valid
    sopen(ch);   //a

4)Every escape character is a valid char literal.
    Example: 
    char c = '\t';
    char c = '\n';
    char c = '\m';   //no such escape character


    Escape characters                   description
    \n                                      New Line
    \t                                      Horizontal Tab
    \r                                      Carriage return
    \b                                      backspace
    \f                                      form feed
    \'                                      single quote
    \"                                      double quote
    \\                                      back slace


    Sopen("This is ' symbol");  //invalid
    Sopen("This is \' symbol");  //valid

Which of the following are valid:
1)char ch = 65536; //invalid
2)char ch = 0XBeer; //invalid
3)char ch = \uFace;  //invalid
4)char ch = '\uBeef';  //valid
4) char ch = '\m';  //invalid
6) char ch = '\iface' ; //invalid

-------------------------------------------------------------
String literals
-----------------------------------------------------------
Any sequence of characters in double code is treadted as string literal.
String s = "suraj";


1.7 Version enhancement with respect to literals:

1) Binary literals:

    For integral data types until 1.6 version we can specify literal value in the following ways:
    1) decimal
    2) octal
    3) hexadecimal
    But from 1.7 version we can also specify literal value even in binary form also.
    allowed digits are 0 and 1. literal value should be prefixed with 0b or 0B.
    Example:
    int x = 0b1111;
    Sopen(x);

2) Usage of _ in numeric literals.

    From 1.7 version onwards between digits of numeric literals.

    double d = 123456.789  //valid
    double d = 1_23_456.789  //valid

    The main advantage of this approach is readibility of the code will be improved.

    At the time of compilation this underscore symbols will be removed automatically hence after compilation the above line will become.
    double d = 123456.789  //valid
    double d = 123456.789  //valid

    We can use more than one underscore(_) between digits.
    double d = 1__2_4__4__5_3.4_8_9;

    We can use _ symbol only between the digits if we are using anywhere else. We will get compile time errors.
    Example:
    double d = _1_23__4_4.4_5_5;  //invalid
    double d = 2_4_4_.3_4_3;    //invalid
    double d = 2_3_4.42_;   //invalid

    Lower data type value we can assign to higher data type variable:

    byte --> short --> int --> long ---> float ---> double
    char --> int --> long --> float --> double

    8 byte long value we can assign to 4 byte float variable because both are following different memory representation internally.
    float f = 10l;
    Sopen(f);