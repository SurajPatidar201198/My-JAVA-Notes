===================================================================================
various possible combination of try-catch-finally
===================================================================================

1)
    try
    {

    }
    catch(X e)
    {

    }
    //valid combination

2)
    try
    {

    }
    catch(X e)
    {

    }
    catch(Y e)
    {

    }
    //valid combination

3)
    try
    {

    }
    catch(X e)
    {

    }
    catch(X e)      
    {

    }
    //above code is invalid 

4)
    try
    {
    
    }
    catch(X e)
    {

    }
    finally
    {

    }
    //valid combination


5)
    try
    {

    }
    finally
    {

    }
    //valid combination



6)
    try
    {

    }
    catch(X e)
    {

    }
    try
    {

    }
    catch(Y e)
    {

    }
    //valid combination


7)
    try
    {

    }
    catch(X e)
    {

    }
    try
    {

    }
    finally
    {

    }
    //valid combination

8)
    try
    {

    }
    //try without catch (or) finally so this is invalid


9)
    catch(X e)
    {

    }
    ce: catch without try so its invalid



10)
    finally
    {

    }
    ce: finally without try


11)
    try
    {

    }
    finally
    {

    }
    catch(X e)          //this will become alone
    {

    }
    ce: catch without try


12)
    try
    {

    }
    Sopen("Hello");
    catch(X e)
    {

    }
    ce1: try without catch or finally
    ce2: catch without try


13)
    try
    {

    }
    catch(X e)
    {

    }
    Sopen("Hello");
    catch(Y e)          //this will become alone
    {

    }
    ce: catch without try


14)
    try
    {

    }
    catch(X e)
    {

    }
    Sopen("Hello");
    finally                 //this will become alone
    {

    }
    ce: finally without try


15)
    try
    {
        try
        {

        }
        catch(X e)
        {

        }
    }
    catch(X e)
    {

    }
    //valid 


16)
    try
    {
        try     //this try is without catch or finally so it will give error
        {

        }
    }
    catch(X e)
    {

    }
    ce: try is without catch or finally


17)

    try
    {
        try
        {

        }
        finally
        {

        }
    }
    catch(X e)
    {
        
    }
    //valid


18)
    try
    {

    }
    catch(X e)
    {
        try
        {

        }
        finally
        {

        }
    }
    //valid


19)
    try
    {

    }
    catch(X e)
    {
        finally
        {

        }
    }
    //ce:finally without try


20)
    try
    {

    }
    catch(X e)
    {

    }
    finally
    {
        try
        {

        }
        catch(X e)
        {

        }
    }
    //valid


21)
    try
    {

    }
    catch(X e)
    {

    }
    finally
    {
        finally         //this will give error
        {

        }
    }
    ce: finally without try


22)
    try
    {

    }
    catch(X e)
    {
        
    }
    finally
    {

    }
    finally     //this will become alone finally without try
    {

    }
    ce:finally without try


23)
    try
        Sopen("try");
    catch(X e)
    {
        Sopen("catch");
    }
    finally
    {

    }

24)

    try
    {

    }
    catch(X e)
    {
        SOpen("catch");
    }
    finally
    {

    }



25)
    try
    {

    }
    catch(X e)
    {

    }
    finally
        Sopen("finally");



Conclusioon:
1)In try-catch-finally order is important.
2)Whenever we are writting try compulosry we should write either catch or finally otherwise we will get
compile time error i.e try without catch or finally is invalid.
3)Whenever we are writting catch block compulosry try block must be required i.e catch without try is invalid.
4)Whenever we are writting finally block compulosry we shoudl have to write try block i.e finally without try is invalid.
5)Inside try-catch-finally block we can declare try-catch-finally blocks i.e nesting of try-catch-finally is allowed.
6)For try-catch-finally block {}  are mandatory.