==========================================================================
java.lang.String
==========================================================================
 
Case 1:

    refer : String Vs StringBuffer.png

Case 2:

    == is for reference comparison everywhere
    .equals()  is for content comparison in String class this method is overridden for content comparison in String class.

    .equals() is for reference comparison in StringBuffer Class this method is not overridden in StringBuffer class

    For Example:

    String s1= new String("Suraj");
    String s2= new String("Suraj");
    Sopen(s1==s2);   //false as this compares references
    Sopen(s1.equals(s2));  //true as equals() method is overridden in String class which compares content

    StringBuffer sb = new StringBuffer("Suraj");
    StringBuffer sb1 = new StringBuffer("Suraj");
    Sopen(sb==sb1);   //false as this compares references
    Sopen(sb.equals(sb1));  //false as equals() method is not overridden in StringBuffer class

    In string class .equals() method is overridden for content comparison hence even thought objects are different 
    if content is same .equals() method returns true.

    In stringBuffer class .equals() method is not overridden for content comparison hence objects class .equals() method
    got executed which is meant for reference comparison due to this if objects  are
    different .equals() method returns false even if content is same.

Case 3: 

    1)String s = new String("durga");

    In this case two objects will be created one in the heap area and the other in SCP(String Constant Pole) and s is always
    pointing to heap object.



    2)String s = "durga";

    In this case only one object will be created in SCP and s is always pointing to that object.

    Note 1: Object creationg in SCP is optional first it will check is there any object already present in SCP with required content 
    if object already present then existing object will be reused.

    If Object not already available then only a new object will be created.

    But this rule is applicable only for SCP but not for heap.

    In java there are 5 memory area:
    1)heap  -- garbage collector concept is applicable in heap area
    2)method area --- SCP is present here 
    3)stack area
    4)PC registers 
    5)Native method stacks

    Note 2: garbage collector is not allowed to access SCP area hence even though object
    doesn't contain reference variable it is not eligible for GC if it is present SCP area.

    All SCP objects will be distroyes automatically at the time of JVM shutdown.

    Example 2:

    String s1 = new String("druga");
    String s2 = new String("durga");
    String s3 = "durga";
    String s4 = "durga";

    //3 object will be created

    Refer : Heap and SCP.png

    Note: Whenver we are using new operator compulory a new object will be created in heap area hence there may be a chance 
    of existing two objects with same content in heap area but not in SCP i.e duplicate objects are possible in heap area but 
    not in SCP.

    Example: 
    //String s1 = new String("durga");
    s1.concat("software");
    String s2 = s1.concat("solutions");
    s1=s1.concat("soft");
    sopen(s1);
    sopen(s2);

    Refer : Heap and SCP 2.png;

    Note: 
    1)For every string constant one object will be placed in SCP area.
    2)Becuse of some runtime operations if an object is required to create  that
    object will be placed only in the heap area but not in SCP area.



