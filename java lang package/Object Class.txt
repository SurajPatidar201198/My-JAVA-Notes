The most commonly required methods for every java class whether it is predefined class or
customized class are defined in a seperate class which is nothing but object class.

Every class in java is a child class of object either directly or indirectly so that object class methods are by
default available to every java class.
Hence object class is considered as root of all java classes.

Note: If our class doesn't extends any other class then only our class is the direct child class of object.
Example: 
A-----child of----->Object

If our class extends any other class then our class is indirect child class of Object class.
class A extends B 
{

}
In above case this is the heirachy:
A--child_of--->B----child of---->Object

Conclusion:
1)Either direct or indirectly java won't provide support for multiple inheritance w.r.t classes.


Object class defines the follwing 11 methods:
1)public String toString();
2)public native int hashCode();
3)public boolean equals(Object o);
4)protected native Object clone() throws CloneNotSupportedException
5)protected void finalize() throws Throwable
6)public final Class getClass()
7)public final void wait() throws InterruptedException
8)public final native void wait(long ms) throws InterruptedException
9)public final void wait(long ms,int ns) throws InterruptedException
10)public native final void notify()
11)public native final void notifyAll();

Strictly speaking object class contains 12 methods the extra method is "private static native void registerNatives()" this method
internally required for object and not available to the child class and hence we are not required to consider this method.

===========================================================
toString()
===========================================================
We can use toString() method to get string representation of the object.
String s = obj.toString();
Wheneever we are trying to print object reference internally toString() method will be called.

Student s =  new Student();
Sopen(s);  ==> Sopen(s.toString())

If our class doesn't contain toString() method then object class toString() method will be executed.

class Student
{
    String name;
    int rollno;
    Student(String name,int rollno)
    {
        this.name=name;
        this.rollno=rollno;
    }
    public static void main(String[] args)
    {
        Student s1= new Student("Suraj",30);
        Student s2= new Student("Ravi",102);
        Sopen(s1);   //Student@1234
        Sopen(s1.toString());  //Student@1234
        Sopen(s2);  //Student@32e3
    }
}

In the above example object class toString() method got executed which is implemented as follows.
public String toString()
{
    return getClass().getName() + "@" + Integer.toHexString(hashCode());
}

Example: classnam@hashocde_in_hexadecimalform

Based on our requirement we can override toString() method to provide our own string representation.
For example: Wheneever we are trying to print student object reference to print his name and roll no. we have
to overide toString() method as follows.

class Student
{
    String name;
    int rollno;
    Student(String name,int rollno)
    {
        this.name=name;
        this.rollno=rollno;
    }
    public String toString()
    {
        return name+"----"+rollno;
    }
    public static void main(String[] args)
    {
        Student s1= new Student("Suraj",30);
        Student s2= new Student("Ravi",102);
        Sopen(s1);   //Suraj---30
        Sopen(s1.toString());  //Suraj---30
        Sopen(s2);  //Ravi---102
    }
}




In all wrapper classes,collection class,string class,stringBuffer and stringBuilder classes toString() method is overridden 
for meaningful string representation hence it is highly recommended to override toString() method in our class also.

Example:
class Test 
{
    public String toString()
    {
        return "test";
    }
    p s void main(String[] args)
    {
        String s = new String("durga");
        Sopen(s);  //durga
        Integer I = new Integer(10);
        Sopen(I);  //10
        AL l = new AL();
        l.add("A");
        l.add("B");
        sopen(l);  //[A,B];
        Test t = new Test();
        Sopen(t);   //test   as we  have override toString() method in our class
    }
}


=============================================================================
hashCode()
=============================================================================
HashCode is not an address of object because we can overide hashCode method but we can't overide address of an object.
1)For evert object a unique number genereated by JVM which is nothing but hashCode.
2)hashCode won't represents address of object.
3)JVM will use hashCode while saving objects into hashing related data structures like hashtable,hashmap,hashset etc.
4)The main advantage of saving object based on hashcode is search operation will become easy(the most powerful search algorithm upto today is hashing).

If we are giving the chance to object class hashcode method it will generate hashcode based on address of the object,it 
doesn't mean hashcode represent address of the object.

Based on our requirement we can override method in our class to generate our own hashcode.
Overridding hashCode() method is said to be proper if and only if for every object we have to gernerate a unique number as hashcode.

class Student
{
    public int hashCode()
    {
        return 100;
    }
}
//improper way becuase all object will get same hashcode
This is improper way of overridding hashcode() because for all student object we are generating same number as hashcode.



class Student
{
    public int hashCode()
    {
        return rollno;
    }
}
//this is proper way to generate hashcode make sure it should be unique.
//this is proper way of overridding hashcode method becuase we are generating a different hashcode for every object.

------------------------------------
toString() vs hashCode()
------------------------------------
1)If we are giving chance to object class toString() method it will internally calls hashcode method.
2)If we are overridding toString() method then our toString() method may not call hashCode() method.

Example: toString() and hashCode().png


class Student
{
    int rollNo;
    String name;
    Student(int r,String n)
    {
        this.rollNo=r;
        this.name=n;
    }
    public int hashCode()
    {
        return 10;
    }
}
public class program3 {
    public static void main(String[] args) {
        Student s = new Student(23,"Rama");
        program3 pp = new program3();
        System.out.println(s.toString());   //this will give output as Student@a becuse internallly object class method is calling hashCode method and thatsy our own class hashCode method will run and its returned value is used in hexadeciaml form.
        
    }
}


==================================================
equals() method
==================================================
we can use equals method to check equality of two objects.
for example:
obj1.equals(obj2);


If our class doesn't contains equals method then object class equals method will be executed.

refer: equalsMethod1.png

In the above example object class equals() method got executes which is meant for reference comparison(address comparison)
i.e if two references pointing to the same object then only .equals() method returns true.

Based on our requirements we can override equals method for content comparison.

While overidding equals method for content comparison we have to take care about the following what is the meaning of 
equality(i.e whether we have to check only name or only roll number or both)

If we are passsing different type of object our equals method should not rise classClastExeption i.e we have to handl classCastExeptino 
if we are passing null then our equals shoudl not rise null pointer exeption that is we have to handle null pointer exception to return
false.

Refer : toString Method.png

The following is the proper way of overridding for student class content comparison.
public boolean equals(Object obj)
{
    try{
    String name1=this.name;
    int rollno1=this.rollno;
    Student s = (Student)obj;
    String name2=s.name;
    int rollno2=s.rollno;
    if(name1.equals(name2) && rollno1==rollno2)   //here we can't apply .equals() on rollNo because it is of primitive type
    {
        return true;
    }
    else 
    {
        return false;
    }
    }
    catch(Exception e)
    {
        return false;
    }
}

//write this code if you want to override object class equals() method and want to check comparison
based on the content.

simplified version of equals() method:

public boolean equals(Object obj)
{
    try{
    Student s = (Student)obj;
    if(name1.equals(s.name1) && rollno==s.rollno)  
    {
        return true;
    }
    else 
    {
        return false;
    }
    }
    catch(Exception e)
    {
        return false;
    }
}

More simplified version of equals method:

public boolean equals(Object obj)
{
    if(obj instanceof Student
    {
        Student s = (Student)obj;
        if(name1.equals(s.name1) && rollno==s.rollno)  
        {
            return true;
        }
        else 
        {
        return false;
        }
    }
    return false;
}

To make above equals method more efficient we have to write the following code at the beginning 
inside equals method.

public boolean equals(Object obj)
{
    if(obj == this)         //accoding to this if both the references pointing to the same object then without performing any comparison .equlas method returns true directly.
    {
        return true;
    }
    if(obj instanceof Student
    {
        Student s = (Student)obj;
        if(name1.equals(s.name1) && rollno==s.rollno)  
        {
            return true;
        }
        else 
        {
        return false;
        }
    }
    return false;
}

LoopHoles:


public class program3 {
    public static void main(String[] args) {
        String s1 = new String("suraj");
        String s2 = new String("suraj");
        System.out.println(s1==s2);         //false         == is for reference comparison
        System.out.println(s1.equals(s2));      //  true    becasuse .equals() is overridden in String class which is meant for content comparsion
        
        //theory of above line 
        //In string Class .equals() method is overridden for content comparison hence, even though objects are different if content is same then .equals method returns true

        StringBuffer sb1 = new StringBuffer("suraj");
        StringBuffer sb2 = new StringBuffer("suraj");
        System.out.println(sb1==sb2);           //false     == is meant for reference comparison
        System.out.println(sb1.equals(sb2));        //false     .equals() method is not overridden in StringBuffer class hence Object class .equals method will run which is meant for refernce comparsion

        //in stringBuffer .equals() method is not overridden for content comparison hence if objects are different .equals() method return false even though content is same.
    }
}

---------------------------------------------
getClass()
----------------------------------------------
We can use getClass() method to get runtime class defination of the object.
public final Class getClass()
{

}
By using Class class object we can access class level properties like fully qualified name of the class,
methods information,constructors information etc.

Example:
import java.lang.reflect.Method;
public class program3 {
    public static void main(String[] args) throws Exception {
        int count=0;
        String o = new String("suraj");
        Class c = o.getClass();
        System.out.println("Fully Qualified Name : "+c.getName());
        Method[] m = c.getDeclaredMethods();
        // Method[] m = c.getDeclaredMethod();
        System.out.println("Methods Inforamation : ");
        for(Method m1 : m)
        {
            count++;
            System.out.println(m1.getName());
        }
        System.out.println("Total Number of Methods are :"+count);

    }
}

Example:
To display database vendor specific connection interface implemented class name.

Connection con = DriverManager.getConnection(....);
Sopen(con.getClass.getName());

**Note:
After loading every .class file JVM will create an object of the type java.lang.Class in the heap area.
Programmer can use this class object to get class Level information.
We can use getClass() method very frequently in reflections.


--------------------------------------------------------------------
finalize()
----------------------------------------------------------------------

Just before destroying an object garbage collector calles finalize() method for cleanup activites.
Once finalize method completes automatically garbage collector destroyes that object.


------------------------------------------------------------------------
wait(),notify(),notifyAll()
-----------------------------------------------------------------------

We can use this methods for interthread communication.
The thread which is expecting updation, it is responsible to call wait() method then immediately that thread
will enter into waiting state.
The thread which is responsible to perform updation after performing updation the thread can call notify() method 
the waiting thread will get the notification and continue its execution with those updates.

/*we will learn more about this method in our multithreading concept***////






